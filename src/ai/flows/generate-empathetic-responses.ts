// This is an AI-generated file. Do not edit directly.
'use server';
/**
 * @fileOverview Generates empathetic responses and relevant advice tailored to the user's situation.
 *
 * - generateEmpatheticResponse - A function that generates empathetic responses.
 * - EmpatheticResponseInput - The input type for the generateEmpatheticResponse function.
 * - EmpatheticResponseOutput - The return type for the generateEmpatheticResponse function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const EmpatheticResponseInputSchema = z.object({
  age: z.number().describe('The age of the user (13-50).'),
  genderIdentity: z.enum(['Male', 'Female', 'Non-Binary']).describe('The gender identity of the user.'),
  ethnicity: z.string().describe('The ethnicity of the user.'),
  vulnerableScore: z.number().min(0).max(10).describe('The vulnerability score of the user (0-10).'),
  anxietyLevel: z.enum(['Low', 'High']).describe('The anxiety level of the user.'),
  breakupType: z.enum(['Mutual', 'Ghosting', 'Cheating', 'Demise', 'Divorce']).describe('The type of breakup the user experienced.'),
  background: z.string().describe('The background of the user.'),
  therapeuticNeeds: z.array(z.enum(['CBT', 'IPT', 'Grief Counseling'])).describe('The therapeutic needs of the user.'),
  currentMessage: z.string().describe('The most recent message from the user.'),
  empathyLevel: z.number().min(0).max(5).describe('The current empathy level of the AI (0-5).'),
});

export type EmpatheticResponseInput = z.infer<typeof EmpatheticResponseInputSchema>;

const EmpatheticResponseOutputSchema = z.object({
  response: z.string().describe('The empathetic response generated by the AI.'),
  updatedEmpathyLevel: z.number().min(0).max(5).describe('The updated empathy level of the AI, incremented by one if possible.'),
});

export type EmpatheticResponseOutput = z.infer<typeof EmpatheticResponseOutputSchema>;

export async function generateEmpatheticResponse(input: EmpatheticResponseInput): Promise<EmpatheticResponseOutput> {
  return generateEmpatheticResponseFlow(input);
}

const prompt = ai.definePrompt({
  name: 'empatheticResponsePrompt',
  input: {schema: EmpatheticResponseInputSchema},
  output: {schema: EmpatheticResponseOutputSchema},
  prompt: `You are an AI therapist specializing in providing empathetic responses and advice to users based on their specific situations.

  The user's age is {{{age}}}, gender identity is {{{genderIdentity}}}, ethnicity is {{{ethnicity}}}, vulnerability score is {{{vulnerableScore}}}, anxiety level is {{{anxietyLevel}}}, and breakup type is {{{breakupType}}}.
  Their background is: {{{background}}}
  Their therapeutic needs are: {{#each therapeuticNeeds}}{{{this}}} {{/each}}

  Current empathy level: {{{empathyLevel}}}

  Based on the user's profile and their latest message:
  """
  {{currentMessage}}
  """

  Generate an empathetic response tailored to their situation, increasing the empathy level incrementally.
  Always respond in British English using medical terms where appropriate (e.g., "surgery", "patient").

  Your response should sound natural and human, and you should only respond from the persona of a therapist.  Do not ask the user how they are doing, or if they need help, as this is implied.

  Ensure that the updatedEmpathyLevel is incremented by one, but does not exceed 5.

  {{output}}`,
});

const generateEmpatheticResponseFlow = ai.defineFlow(
  {
    name: 'generateEmpatheticResponseFlow',
    inputSchema: EmpatheticResponseInputSchema,
    outputSchema: EmpatheticResponseOutputSchema,
  },
  async input => {
    const {output} = await prompt({
      ...input,
      empathyLevel: Math.min(input.empathyLevel, 5), // Ensure empathyLevel does not exceed 5
    });

    // Increment empathy level, but do not exceed 5
    const updatedEmpathyLevel = Math.min(input.empathyLevel + 1, 5);

    return {
      response: output!.response,
      updatedEmpathyLevel: updatedEmpathyLevel,
    };
  }
);
